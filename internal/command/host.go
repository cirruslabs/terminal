package command

import (
	"fmt"
	"github.com/cirruslabs/terminal/pkg/host"
	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"strings"
)

var hostLogLevel string
var hostServerAddress string
var hostTrustedSecret string

func runHost(cmd *cobra.Command, args []string) error {
	logLevel, err := logrus.ParseLevel(logLevel)
	if err != nil {
		return err
	}
	logger := logrus.New()
	logger.SetLevel(logLevel)

	if hostTrustedSecret == "" {
		hostTrustedSecret = uuid.New().String()
		logger.Infof("genereated trusted secret: %s", hostTrustedSecret)
	}

	terminalHost, err := host.New(
		host.WithLogger(logger),
		host.WithServerAddress(hostServerAddress),
		host.WithTrustedSecret(hostTrustedSecret),
		host.WithLocatorCallback(func(locator string) error {
			logger.Infof("received locator: %s", locator)
			return nil
		}),
	)
	if err != nil {
		return err
	}

	return terminalHost.Run(cmd.Context())
}

func newHostCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "host [flags]",
		Short: "Run terminal host on a local machine, useful for debugging",
		RunE:  runHost,
	}

	var logLevelNames []string
	for _, level := range logrus.AllLevels {
		logLevelNames = append(logLevelNames, level.String())
	}
	cmd.PersistentFlags().StringVar(&hostLogLevel, "log-level", "info",
		fmt.Sprintf("logging level (possible levels: %s)", strings.Join(logLevelNames, ", ")))

	cmd.PersistentFlags().StringVar(&hostServerAddress, "server-address", "https://terminal.cirrus-ci.com:443",
		"terminal server address")
	cmd.PersistentFlags().StringVar(&hostTrustedSecret, "trusted-secret", "",
		"trusted secret, a secure one is auto-generated by default")

	return cmd
}
